{"ast":null,"code":"import { v4 as uuid } from 'uuid';\nimport * as i0 from \"@angular/core\";\nexport class DbzService {\n  onNewCharacter(character) {\n    const newCharacter = {\n      id: uuid(),\n      ...character\n    };\n    this.characters.push(newCharacter);\n  }\n  DeleteCharacterById(id) {\n    this.characters = this.characters.filter(character => character.id !== id);\n  }\n  constructor() {\n    this.characters = [{\n      id: uuid(),\n      name: 'Krillin',\n      power: 1000\n    }, {\n      id: uuid(),\n      name: 'Gokú',\n      power: 9500\n    }, {\n      id: uuid(),\n      name: 'Trunks',\n      power: 5000\n    }];\n  }\n  static #_ = this.ɵfac = function DbzService_Factory(t) {\n    return new (t || DbzService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DbzService,\n    factory: DbzService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["v4","uuid","DbzService","onNewCharacter","character","newCharacter","id","characters","push","DeleteCharacterById","filter","constructor","name","power","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Fabriany Pico\\Desktop\\curso-Angular\\02-bases\\src\\app\\dbz\\services\\dbz.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {v4 as uuid } from 'uuid';\r\n\r\nimport { Character } from '../interfaces/character.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DbzService {\r\n\r\n  public characters :  Character[] = [\r\n    {\r\n      id: uuid(),\r\n      name: 'Krillin',\r\n      power: 1000\r\n    },\r\n    {\r\n      id: uuid(),\r\n      name: 'Gokú',\r\n      power: 9500\r\n    },\r\n    {\r\n      id: uuid(),\r\n      name: 'Trunks',\r\n      power: 5000\r\n    }\r\n  ];\r\n\r\n  onNewCharacter(character: Character) :void {\r\n\r\n    const newCharacter: Character= {id:uuid(), ...character}\r\n    this.characters.push(newCharacter);\r\n  }\r\n\r\n   DeleteCharacterById(id:string){\r\n    this.characters = this.characters.filter(character => character.id !== id);\r\n   }\r\n\r\n\r\n\r\n\r\n\r\n  constructor() { }\r\n\r\n}\r\n"],"mappings":"AACA,SAAQA,EAAE,IAAIC,IAAI,QAAQ,MAAM;;AAOhC,OAAM,MAAOC,UAAU;EAoBrBC,cAAcA,CAACC,SAAoB;IAEjC,MAAMC,YAAY,GAAa;MAACC,EAAE,EAACL,IAAI,EAAE;MAAE,GAAGG;IAAS,CAAC;IACxD,IAAI,CAACG,UAAU,CAACC,IAAI,CAACH,YAAY,CAAC;EACpC;EAECI,mBAAmBA,CAACH,EAAS;IAC5B,IAAI,CAACC,UAAU,GAAG,IAAI,CAACA,UAAU,CAACG,MAAM,CAACN,SAAS,IAAIA,SAAS,CAACE,EAAE,KAAKA,EAAE,CAAC;EAC3E;EAMDK,YAAA;IAhCO,KAAAJ,UAAU,GAAkB,CACjC;MACED,EAAE,EAAEL,IAAI,EAAE;MACVW,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE;KACR,EACD;MACEP,EAAE,EAAEL,IAAI,EAAE;MACVW,IAAI,EAAE,MAAM;MACZC,KAAK,EAAE;KACR,EACD;MACEP,EAAE,EAAEL,IAAI,EAAE;MACVW,IAAI,EAAE,QAAQ;MACdC,KAAK,EAAE;KACR,CACF;EAgBe;EAAC,QAAAC,CAAA,G;qBAlCNZ,UAAU;EAAA;EAAA,QAAAa,EAAA,G;WAAVb,UAAU;IAAAc,OAAA,EAAVd,UAAU,CAAAe,IAAA;IAAAC,UAAA,EAFT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}